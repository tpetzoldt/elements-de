---
title: "11-Multivariate methods I"
author: "Thomas Petzoldt"
date:   "`r Sys.Date()`"
---

```{r setup, include=FALSE}
## this code chunk sets some technical details, it is not shown to the user
library("readxl")
library("vegan")
library("knitr")
library("kableExtra")
library("leaflet")
library("rgl")
library("vegan3d")
library("scatterplot3d")
#knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
knitr::opts_chunk$set(echo = TRUE, eval=TRUE)
setupKnitr(autoprint = TRUE) # for embedded RGL graphics
```

## Data sets and terms of use

<br>

1. The "UBA-lakes" data set originates from the public data repository of the German 
Umweltbundesamt [@UBA2020]. The data set provided can be used freely according
to the [terms and conditions](https://www.umweltbundesamt.de/datenschutz-haftung#c-urheber-und-kennzeichenrecht) 
published at the [UBA web site](https://www.umweltbundesamt.de/), that refer to
ยง 12a EGovG with respect of the data, and to the [Creative Commons CC-BY ND International License 4.0 ](https://creativecommons.org/licenses/by-nd/4.0/deed.de) with respect to other objects directly created by UBA.

2. The "gauernitz" data set contains simplified teaching versions from research data, of the study from @winkelmann_fish_2011

3. The document itself, the codes and the ebedded images are own work and can be shared according to [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.en).


## An introductory example

![](../img/uba-lakes.png)

## Correlation between all variables?

```{r}
library("readxl") # read Excel files directly
lakes <- as.data.frame(
  read_excel("../data/uba/3_tab_kenndaten-ausgew-seen-d_2021-04-08.xlsx", sheet="Tabelle1", skip=3)
)
names(lakes) <- c("name", "state", "drainage", "population", "altitude", 
                  "z_mean", "z_max", "t_ret", "volume", "area", "shore_length", 
                  "shore_devel", "drain_ratio", "wfd_type")
str(lakes)
```

* `names(lakes)` replaces the original German column names by abbreviated English abbreviations

## Create pairwise scatter plots for all variables?

```{r lakes-all-variables}
plot(lakes)
```

## Create pairwise scatter plots for all variables?

<br>

* not a good idea, 14 variables would produce 182 (or 91) plots

* can lead to "statistical fishing"

* we need methods to extract the main information with a small number of plots



## The multivariate approach

<br>


[Work with the complete original variables directly]{.bigfont}

<br>

**$\rightarrow$ Multivariate statistics**


 * dependent variables [+ explanation variables optional]{.gray}
 * analyze distance and location in multidimensional space
 * find way to vizualize relationship in lower dimensions

<br>

For comparison

* univariate: 1 variable
* bivariate: 1 dependent, 1 independent variable
* multiple: 1 dependent, >1 independent variables

## Two approches of multivariate statistics

```{r echo=FALSE}
benthos <- read.csv("../data/gauernitz.csv") 
species <- benthos[c("Mollusca", "Diptera", "Baetis", "Plecoptera", 
                     "Coleoptera", "Turbellaria", "Heptageniidae",
                     "Ephemeroptera", "Gammarus", "Trichoptera", 
                     "Acari", "Nematoda", "Oligochaeta")]
```


:::{.column width="46%" .add-space}

**Ordination**

```{r approach-pca, echo=FALSE, fig.width=5, fig.height=5}
par(mar=c(4,4,1,1))
biplot(prcomp(scale(species)))
```

* dimension reduction
* relate observations and variables
:::


::: {.column width="46%"}

**Cluster analysis**

```{r approach-cluster, echo=FALSE, fig.width=5, fig.height=5}
par(mar=c(1,4,1,1))
rownames(species) <- benthos$Site
plot(hclust(dist(scale(species))), hang=-1, main="")
```

* distance and similarity
* identification of groups

:::


## Basic concepts

<br>

**Similarity and correlation**

* distance and similarity:<br>
  $\rightarrow$ How different or similar are the observations?
* correlation and covariance:<br>
  $\rightarrow$  Are variables interdependent?
* dimension reduction:<br>
  $\rightarrow$ Try to show essential parts of information on a lower number of dimensions.
* cluster analysis:<br>
  $\rightarrow$  Show which observations are closely together.
* ordination:<br>
  $\rightarrow$  Plot data at lower dimensions, similar observations closely together.



# The UBA-lakes example

## A data set from German lakes

```{r lakes-leaflet, echo=FALSE, fig.height=6, fig.width=10, fig.align='center'}
library("leaflet")

lakepos <- read.csv("../data/uba/kenndaten-seen-gps.csv")

leaflet(options = leafletOptions(zoomControl = TRUE)) |>
  addTiles() |>
  setView(lng = 10.447, lat = 51.16, zoom = 5) |>
  addMarkers(lng = lakepos$lon, lat = lakepos$lat,
             popup = lakepos$name,
             options = markerOptions(title=lakepos$name, closeButton = FALSE))
```

<small>
GPS data from [Wikipedia](https://de.wikipedia.org) and [Google Maps](https://maps.google.de), map from [https://www.openstreetmap.org/](https://www.openstreetmap.org/copyright/)
</small>

## Example: A simplified subset from the UBA lake data


```{r read-lakes-combined, echo=FALSE}
lakes <- read.csv(file="../data/uba/lakes-combined-data.csv")
valid_columns <- c(
  "name", "shortname",
  #"drainage", 
  #"population", 
  #"altitude", 
  "z_mean",
  "z_max", 
  "t_ret", 
  "volume", 
  "area", 
  #"shore_length", 
  #"shore_devel", 
  #"drain_ratio", 
  "p_tot", 
  "n_no3", 
  "chl",
  "wfd_type"
)

## less columns, so that we get a simplified subset and more complete cases
lakes <- lakes[valid_columns] |> na.omit()
row.names(lakes) <- lakes$shortname

lakes_saved <- lakes # backup copy of the data set for later use

lake_ids <- lakes[c("name", "shortname")]
lakedata <- lakes[, -c(1, 2)]
lakedata$wfd_type <- NULL
```

<small>
```{r, echo=FALSE}
## print table
kable(lakes_saved)
```
mean and maximum depth ($\mathrm{m}$): z_mean, z_max; retention time (years): t_ret;
volume ($\mathrm{10^9 m^3}$); area ($\mathrm{km^2}$), total phosphorus P ($\mathrm{\mu g/L}$): 
p_tot; nitrogen-N ($\mathrm{mg/L}$):
n_no3, chlorophyll ($\mathrm{\mu g/L}$): chl, water framework directive lake type: wfd_type

<br>

Data set from UBA (Umweltbundesamt = German Federal Environmental Agency), data modified<br>
Original data source: [https://www.umweltbundesamt.de/themen/wasser/seen](https://www.umweltbundesamt.de/themen/wasser/seen)<br>
Terms of use: [https://www.umweltbundesamt.de/datenschutz-haftung-urheberrecht](https://www.umweltbundesamt.de/datenschutz-haftung-urheberrecht)

</small>

## Code to read the data

```{r, eval=FALSE}
lakes <- read.csv("https://tpetzoldt.github.io/datasets/data/lakes-combined-data.csv")
valid_columns <- c("name", "shortname", "z_mean", "z_max",  "t_ret", "volume", 
  "area", "p_tot", "n_no3", "chl", "wfd_type")
lakes <- lakes[valid_columns] |> na.omit()
row.names(lakes) <- lakes$shortname

lake_ids <- lakes[c("name", "shortname")]
lakedata <- lakes[, -c(1, 2)]

## remove wfd_type for now
lakedata$wfd_type <- NULL
```

<br>

* Source of original data: Uwweltbundesamt [https://www.uba.de](https://www.uba.de)
* Data files downloadable from [https://github.com/tpetzoldt/elements/tree/main/data/uba](https://github.com/tpetzoldt/elements/tree/main/data/uba)
* Terms of use, see: [Copyright](https://github.com/tpetzoldt/elements/blob/main/data/uba/3_tab_kenndaten-ausgew-seen-d_2021-04-08-copyright.txt) and [description of derived data](https://github.com/tpetzoldt/elements/blob/main/data/uba/lakes-combined-data-info.txt)



## Data transformation and normalization

```{r uba-lakes-boxplot, fig.align='center', fig.width=8, fig.height=3}
par(mfrow = c(1, 4), mar = c(6, 4, 3, 1), las = 2)
boxplot(lakedata, main = "raw data")
boxplot(scale(lakedata), main = "normalized")
boxplot(scale(sqrt(lakedata)), main = "sqrt + normalized")
boxplot(scale(log(lakedata)), main = "log + normalized")
```


* `scale()` performs normalisation (z-transformation)
* aim: make different scales better comparable


# Ordination methods

## Principal Component Analysis: PCA

<br>

* identify cvovariance or correlation structure
* rotate coordinate system, so that it points in the diretions of maximum variance
* $k$ dimensions in original space are transformed into $k$ orthogonal (rectangular) coordinates in principal components space.
* works with any number of dimensions
* visualisation by a 3D example

## Correlation structure of the lakes data set

<br>

::: {.bigfont}
```{r echo=TRUE}
round(cor(lakedata), 2)
```
:::


<br>

* Let's pick 3 variables for a 3D visualization: `z_mix`, `z_max` and `volume`.
* Use log-transformation to make them symetrically distributed.



## `z_mix`, `z_max` and `volume` are highly corelated

```{r, echo=FALSE}
lakes <- read.csv(file="../data/uba/lakes-combined-data.csv")
valid_columns <- c(
  "name", "shortname",
  "z_mean",
  "z_max", 
  "volume"
)

## less columns, so that we get a simplified subset and more complete cases
lakes <- lakes[valid_columns] |> na.omit()

row.names(lakes) <- lakes$shortname
lake_ids <- lakes[c("name", "shortname")]
lakedata <- lakes[, -c(1, 2)]
```


```{r scatterplot-3-variables, echo= FALSE, fig.align='center'}
par(mfrow=c(2,2), mar=c(4,4,1,1)+.1)
plot(log(z_max) ~ log(z_mean), data=lakedata, pch=16)
plot(log(z_max) ~ log(volume), data=lakedata, pch=16)
plot(log(volume) ~ log(z_mean), data=lakedata, pch=16)
par(mar=c(3,4,2,4))
with(lakedata, scatterplot3d(log(z_mean), log(z_max), log(volume), pch=16, type="h"))
```

$\rightarrow$ We see that the three variables carry **redundant** information.



## How rotation of axes works


:::{.column width="48%"}

Original coordinates

```{r ordirgl1, echo=FALSE, eval=TRUE, fig.height=4, fig.width=4, fig.align='center'}
A <- with(lakedata, data.frame(
  log_z_mean = log(z_mean),
  log_z_max  = log(z_max),
  log_volume = log(volume)
))

ordirgl(A, type="p", ax.col = "black", col="red", box=FALSE)
view3d(theta = 5, phi = 15, fov=30, zoom=1)
#axes3d(labels=FALSE)
```

:::


:::{.column width="48%"}

PCA rotated coordinates

```{r ordirgl2, echo=FALSE, eval=TRUE, fig.height=4, fig.width=4, fig.align='center'}
pc <- prcomp(A)
ordirgl(pc, type="p", display="sites", 
        ax.col = "black", col="red")#, xlim=c(0,6), ylim=c(0,6), zlim=c(0,6))
view3d(theta = 0, phi = 0, fov=30, zoom=1)
#axes3d()
```

:::

<br>

* This slide contains interactive 3D graphics, that can be rotated with the mouse.
* Rotate the left image, so that the points on both size show similar patterns.
* Rotate the right image to show PC 3

$\rightarrow$ Most of the 3D information of the data can be vizualized in 2D.

Note: log-transformed variables were used in this example.


## PCA is an orthogonal (model II) regression


:::{.column width="32%"}

<br>

* PC1, PC2, PC3 are the principal components
* OLS is ordinary least squares regression (linear model lm)

:::

:::{.column width="66%"}

```{r orthogonal-regression, echo=FALSE, fig.height=6, fig.width=6, fig.align='center'}

col <- c("red", "cyan", "violet")

rotate_pc <- function(x, pc=c(1, 2), ...) {
  p <- prcomp(x)
  l <- p$rotation #loadings(p)
  a <- p$center

  plot(x, las=1, pch=16, ...)
  abline(lm(x[,2] ~ x[,1]), col="blue", lty="dotted", lwd=2)
  
  b1 <- l[2,1]/l[1,1]
  abline(a=a[2] - b1*a[1], b=b1, col=col[pc[1]], lwd=2)
  
  b2 <-  l[2,2]/l[1,2]
  abline(a=a[2] - b2*a[1], b=b2, col=col[pc[2]], lwd=2)
  
  legend("bottomright", c(paste("PC", pc[1]), paste("PC", pc[2]), "OLS"), 
         col=c(col[pc[1]], col[pc[2]], "blue"), lwd=2,
         lty=c("solid","solid","dotted"), bty="o", bg="white")
}

par(mfrow=c(2, 2))
par(mar=c(4.1, 5.1, 2.1, 1.1))

rotate_pc(A[,1:2], 1:2, xlim=c(0,10), ylim=c(0,10))
rotate_pc(A[,c(3,1)], c(3,1), xlim=c(-5,5), ylim=c(0,10))
rotate_pc(A[,c(2,3)], c(2,3), xlim=c(0,10), ylim=c(-5,5))

p <- prcomp(A)
#biplot(p)

plot(p$x[,1], p$x[,2], pch=16, col="blue", xlab="PC 1", ylab= "PC 2")
abline(h=0, col=col[1], lwd=2)
abline(v=0, col=col[2], lwd=2)
```

:::

## Now analyse all numeric variables

<small>
```{r, echo=FALSE}
lakes <- lakes_saved
lakes$wfd_type <- NULL

lake_ids <- lakes[c("name", "shortname")]
lakedata <- lakes[, -c(1, 2)]


lakedata2 <- sqrt(lakedata)

kable(lakes)
```
</small>

* columns: called **variables** or **species**
* rows: **observations** or **objects**

## PCA with the UBA lake data


```{r, echo=FALSE}
options(width=120)
```


```{r}
pc <- prcomp(scale(lakedata))
```

Eigenvalues (proportion of variance) indicate importance of components.

```{r}
summary(pc)
```


```{r uba-pca-variance, echo=FALSE, fig.align='center', fig.width=10, fig.height=3.5}
par(mar=c(4,4,2,1), las=1)
plot(pc)
n_pc <- length(pc$sdev)
mtext(side=1, at=1.2*(1:n_pc) - 0.6, text=paste("PC", 1:n_pc))
```

## PCA Biplot

```{r pca-biplot1, fig.align='center', fig.width=6, fig.height=6}
biplot(pc)
```

## PCA with sqrt transformed data

<br>

```{r}
lakedata2 <- sqrt(lakedata)
pc <- prcomp(scale(lakedata2))
summary(pc)
```

<br>

* The PCA with the untransformed data looked very asymmetric, we repeat it with
square root transformed data.
* helps to get a better "resolution"
* must be taken into account when interpreting the results
* log transformation is also possible


## Biplot of sqrt transformed data  (1.-3. PC)

```{r uba-pca-biplot, fig.align='center', fig.width=12, fig.height=6}
par(mfrow=c(1, 2), mar=c(5, 4, 4, 2.4), las=1)
biplot(pc)
biplot(pc, choices=c(3, 2))
```



## PCA with the vegan package

```{r}
pc <- rda(lakedata2, scale = TRUE)
summary(pc)
```

<!---
summary(pc3)$cont$importance # trick to suppress long output
--->

The two first PCs explain PC 1 = `r round(summary(pc)$cont$importance[3,2],2) * 100`% of variance of the square root transformed observations.

## Variance importance and biplot


:::{.column width="49%"}

**Importance of components**

* PC 1 = `r round(summary(pc)$cont$importance[2,1], 2)*100`%
* PC 2 = `r round(summary(pc)$cont$importance[2,2], 2)*100`%
* PC 3 = `r round(summary(pc)$cont$importance[2,3], 2)*100`%

$\Rightarrow$ The two first PCs explain PC 1 = `r round(summary(pc)$cont$importance[3,2],2) * 100`% of variance of the square root transformed observations.

:::


:::{.column width="49%"}

```{r uba-rda-biplot, fig.width=5, fig.height=5, fig.align='center'}
biplot(pc)
```
:::

## Interpretation


:::{.column width=69%}
**Variables**

* only long arrows can be interpreted
* same direction: positive correlation
* opposite direction: negative correlation
* rectangular: no correlation

**Observations**

* identification of groups and extreme cases

**Combined View**

* relative size of variable for observations
* arrow direction: high values
* opposite direction: low values
* around middle: average

$\Rightarrow$ [Important: always read perpendicular to PCs and arrows!]{.red}
:::

:::{.column width=29%}

```{r pca-interpretation, fig.width=2.5, echo=FALSE, fig.height=6}
par(mfrow=c(3, 1), mar=c(4, 4.5, 0.5, 1), las=1)
biplot(pc, display="species")
biplot(pc, display="sites")
biplot(pc)
```
:::


## Biplot in 3D

:::{.column width="29%"}

<br>

**Variance**

* PC 1 = `r round(summary(pc)$cont$importance[2,1], 2)*100`%
* PC 2 = `r round(summary(pc)$cont$importance[2,2], 2)*100`%
* PC 3 = `r round(summary(pc)$cont$importance[2,3], 2)*100`%
* sum of PC 4 ... 8 = `r 100 - round(summary(pc)$cont$importance[3,3], 2)*100`%

<br>

$\rightarrow$ Use the mouse to rotate and zoom.
:::


:::{.column width="69%"}
```{r ordirgl3, echo=FALSE, eval=TRUE, fig.height=5, fig.width=5, fig.align='center'}
ordirgl(pc, col = "yellow")
orgltext(pc, display = "species", col="red")
orgltext(pc, display = "sites", col="blue", pos=4)
view3d(theta = 5, phi = 15, fov=30, zoom=1)
```
:::



## Nonmetric Multidimensional Scaling: NMDS

```{r uba-nmds, fig.align='center', fig.width=5, fig.height=5}
md <- metaMDS(lakedata2, scale = TRUE, distance = "euclid", trace=FALSE)
plot(md, type="text")
abline(h=0, col="grey", lty="dotted")
abline(v=0, col="grey", lty="dotted")
```

The NMDS tries to map the higher dimensions even better to 2D or 3D. However, it accepts some distortion.
More about this in the next chapter.


## The code

```{r, eval=FALSE}
lakes <- read.csv("https://tpetzoldt.github.io/datasets/data/lakes-combined-data.csv")
valid_columns <- c("name", "shortname", "z_mean", "z_max",  "t_ret", "volume", 
  "area", "p_tot", "n_no3", "chl", "wfd_type")

# set row names and limit data set to complete records without missing data
row.names(lakes) <- lakes$shortname
lakes <- na.omit(lakes[valid_columns])

# only the numerical variables
lakedata <- lakes[c("z_mean", "z_max",  "t_ret", "volume", 
                     "area", "p_tot", "n_no3", "chl")] 

## PCA with the vegan package
library("vegan")
lakedata2 <- sqrt(lakedata)
pc <- rda(lakedata2, scale = TRUE)
summary(pc)
biplot(pc)
biplot(pc, choices=c(3, 2))

## 3D Plot
library("vegan3d")
ordirgl(pc, col = "yellow")
orgltext(pc, display = "species", col="red")
orgltext(pc, display = "sites", col="blue", pos=4)
view3d(theta = 5, phi = 15, fov=30, zoom=1)

## NMDS
md <- metaMDS(lakedata2, scale = TRUE, distance = "euclid", trace=FALSE)
plot(md, type="text")
abline(h=0, col="grey", lty="dotted")
abline(v=0, col="grey", lty="dotted")
```

* Data and full source code is available from [https://github.com/tpetzoldt/elements/](https://github.com/tpetzoldt/elements/)

## Summary

<br>

* Multivariate methods can be used to analyze data sets, where multiple variables depend on each other.
* PCA is a dimension reduction technique that tries to map high-dimensional data to a lower number of dimensions.
* It can be used as an **explorative** technique to find relationships between data.
* Compared to creating multiple plots between all variables, it helps to see the overall picture, saves time and avoids statistical fishing.
* The next chapter will introduce more methods.

<br>

**Further reading**

* @oksanen_multivariate_2010
* @borcard_numerical_2018



## References

<br>

